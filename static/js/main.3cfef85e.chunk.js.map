{"version":3,"sources":["components/Post/Post.js","components/Loader/Loader.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/Input/Input.js","components/Textarea/Textarea.js","components/NewCommentForm/NewCommentForm.jsx","components/Comment/Comment.js","components/PostComments/PostComments.jsx","components/PostDetails/PostDetails.jsx","api/users.js","components/UserSelect/UserSelect.js","App.jsx","index.js"],"names":["Post","id","title","userId","selectedPostId","handleClick","type","className","onClick","defaultProps","Loader","BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","data","getUserPosts","posts","filter","post","getPostDetails","postId","details","PostsList","selectedUserId","selectPost","useState","setPosts","isLoading","setIsLoading","useEffect","loadedPosts","loadPosts","map","key","getPostComments","comments","postComments","comment","addComment","name","email","body","method","headers","JSON","stringify","removeComment","commentId","Input","placeholder","value","onChange","Textarea","NewCommentForm","updateComments","setName","setEmail","setBody","error","setError","handleSubmit","event","preventDefault","includes","onSubmit","target","Comment","PostComments","PostDetails","setPost","setComments","hideStatus","setHideStatus","loadDetails","postDetails","length","getUsers","users","UserSelect","selectUser","setUsers","loadUsers","loadedUser","slice","user","App","setSelectedUserId","setSelectedPostId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3cfef85e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Post = ({ id, title, userId, selectedPostId, handleClick }) => (\n  <>\n    <div>\n      <b>{`[User #${userId}]:`}</b>\n      {title}\n    </div>\n\n    <button\n      type=\"button\"\n      className=\"PostsList__button button\"\n      onClick={() => handleClick(id)}\n    >\n      {selectedPostId === id\n        ? 'Close'\n        : 'Open'\n      }\n    </button>\n  </>\n);\n\nPost.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number,\n  selectedPostId: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nPost.defaultProps = {\n  userId: 0,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport async function request(url, options) {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, { method: 'DELETE' });\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const details = await request(`/posts/${postId}`);\n\n  return details;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Post } from '../Post';\nimport './PostsList.scss';\n\nimport { Loader } from '../Loader';\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({ selectedUserId, selectedPostId, selectPost }) => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadPosts = async() => {\n      const loadedPosts = await getUserPosts(selectedUserId);\n\n      setPosts(loadedPosts);\n      setIsLoading(false);\n    };\n\n    loadPosts();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoading\n        ? (\n          <Loader />\n        )\n        : (\n          <ul>\n            {posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <Post\n                  {...post}\n                  selectedPostId={selectedPostId}\n                  handleClick={selectPost}\n                />\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { request, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  const postComments = comments.filter(comment => comment.postId === postId);\n\n  return postComments;\n};\n\nexport const addComment = async(postId, name, email, body) => post(\n  '/comments',\n  {\n    postId,\n    name,\n    email,\n    body,\n  },\n);\n\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Input = ({ name, placeholder, value, onChange }) => (\n  <input\n    type=\"text\"\n    name={name}\n    placeholder={placeholder}\n    className=\"NewCommentForm__input\"\n    value={value}\n    onChange={onChange}\n  />\n);\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Textarea = ({ value, onChange }) => (\n  <textarea\n    name=\"body\"\n    placeholder=\"Type comment here\"\n    className=\"NewCommentForm__input\"\n    value={value}\n    onChange={onChange}\n  />\n);\n\nTextarea.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addComment } from '../../api/comments';\nimport { Input } from '../Input';\nimport { Textarea } from '../Textarea';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (!name || !body || !email) {\n      setError('Fill all fields');\n\n      return;\n    }\n\n    if (!email.includes('@') || !email.includes('.')) {\n      setError('Fill email correct');\n\n      return;\n    }\n\n    await addComment(postId, name, email, body);\n    updateComments();\n\n    setName('');\n    setBody('');\n    setEmail('');\n    setError('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <Input\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <Input\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <Textarea\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {error && <p className=\"NewCommentForm__error\">{error}</p>}\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({ id, body, onClick }) => (\n  <>\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={() => onClick(id)}\n    >\n      X\n    </button>\n\n    <p>\n      {body}\n    </p>\n  </>\n);\n\nComment.propTypes = {\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Comment } from '../Comment';\nimport { removeComment } from '../../api/comments';\n\nexport const PostComments = ({ comments, updateComments }) => {\n  const handleClick = async(commentId) => {\n    await removeComment(commentId);\n    updateComments();\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li\n          key={comment.id}\n          className=\"PostDetails__list-item\"\n        >\n          <Comment\n            {...comment}\n            onClick={handleClick}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPostComments.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { PostComments } from '../PostComments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [hideStatus, setHideStatus] = useState(false);\n\n  useEffect(() => {\n    loadDetails();\n    updateComments();\n  }, [selectedPostId]);\n\n  const loadDetails = async() => {\n    const postDetails = await getPostDetails(selectedPostId);\n\n    setPost(postDetails);\n    setHideStatus(false);\n  };\n\n  const updateComments = async() => {\n    const postComments = await getPostComments(selectedPostId);\n\n    setComments(postComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setHideStatus(!hideStatus)}\n          >\n            {hideStatus\n              ? `Hide ${comments.length} comments`\n              : 'Show comments'\n            }\n          </button>\n        ) : (\n          <h3>No comments</h3>\n        )}\n\n        {hideStatus\n          && (\n            <PostComments\n              comments={comments}\n              updateComments={updateComments}\n            />\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            updateComments={updateComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUsers = async() => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ selectedUserId, selectUser }) => {\n  const [users, setUsers] = useState([]);\n\n  const loadUsers = async() => {\n    const loadedUser = await getUsers();\n\n    setUsers(loadedUser.slice(0, 9));\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUserId}\n        onChange={selectUser}\n      >\n        <option value=\"0\">All users</option>\n        {users.map(user => (\n          <option\n            key={user.id}\n            value={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = useCallback((event) => {\n    setSelectedUserId(+event.target.value);\n  }, []);\n\n  const selectPost = (postId) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          selectUser={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectPost={selectPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails\n                selectedPostId={selectedPostId}\n              />\n            )\n            : (\n              <h3>Open a post</h3>\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}