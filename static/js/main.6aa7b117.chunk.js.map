{"version":3,"sources":["components/Loader/Loader.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostComments/PostComments.jsx","components/PostDetails/PostDetails.jsx","api/users.js","components/UserSelect/UserSelect.js","App.jsx","index.js"],"names":["Loader","className","BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","data","getUserPosts","userId","posts","filter","post","getPostDetails","postId","details","PostsList","selectedUserId","selectedPostId","selectPost","useState","setPosts","isLoading","setIsLoading","useEffect","loadedPosts","loadPosts","map","key","id","title","type","onClick","getPostComments","comments","postComments","comment","addComment","name","email","body","method","headers","JSON","stringify","removeComment","commentId","NewCommentForm","updateComments","setName","setEmail","setBody","error","setError","handleSubmit","event","preventDefault","includes","onSubmit","placeholder","value","onChange","target","PostComments","handleClick","PostDetails","setPost","setComments","hideStatus","setHideStatus","loadDetails","postDetails","length","getUsers","users","UserSelect","selectUser","setUsers","loadUsers","loadedUser","slice","user","App","setSelectedUserId","setSelectedPostId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6aa7b117.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport async function request(url, options) {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, { method: 'DELETE' });\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const details = await request(`/posts/${postId}`);\n\n  return details;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nimport { Loader } from '../Loader';\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({ selectedUserId, selectedPostId, selectPost }) => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadPosts = async() => {\n      const loadedPosts = await getUserPosts(selectedUserId);\n\n      setPosts(loadedPosts);\n      setIsLoading(false);\n    };\n\n    loadPosts();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoading\n        ? (\n          <Loader />\n        )\n        : (\n          <ul>\n            {posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]:`}</b>\n                  {post.title}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => selectPost(post.id)}\n                >\n                  {selectedPostId === post.id\n                    ? 'Close'\n                    : 'Open'\n                  }\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n","import { request, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  const postComments = comments.filter(comment => comment.postId === postId);\n\n  return postComments;\n};\n\nexport const addComment = async(postId, name, email, body) => post(\n  '/comments',\n  {\n    postId,\n    name,\n    email,\n    body,\n  },\n);\n\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (!name || !body || !email) {\n      setError('Fill all fields');\n\n      return;\n    }\n\n    if (!email.includes('@') || !email.includes('.')) {\n      setError('Fill email correct');\n\n      return;\n    }\n\n    await addComment(postId, name, email, body);\n    updateComments();\n\n    setName('');\n    setBody('');\n    setEmail('');\n    setError('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {error && <p className=\"NewCommentForm__error\">{error}</p>}\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { removeComment } from '../../api/comments';\n\nexport const PostComments = ({ comments, updateComments }) => {\n  const handleClick = async(commentId) => {\n    await removeComment(commentId);\n    updateComments();\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li\n          key={comment.id}\n          className=\"PostDetails__list-item\"\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => handleClick(comment.id)}\n          >\n            X\n          </button>\n\n          <p>\n            {comment.body}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPostComments.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { PostComments } from '../PostComments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [hideStatus, setHideStatus] = useState(false);\n\n  useEffect(() => {\n    loadDetails();\n    updateComments();\n  }, [selectedPostId]);\n\n  const loadDetails = async() => {\n    const postDetails = await getPostDetails(selectedPostId);\n\n    setPost(postDetails);\n    setHideStatus(false);\n  };\n\n  const updateComments = async() => {\n    const postComments = await getPostComments(selectedPostId);\n\n    setComments(postComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setHideStatus(!hideStatus)}\n          >\n            {hideStatus\n              ? `Hide ${comments.length} comments`\n              : 'Show comments'\n            }\n          </button>\n        ) : (\n          <h3>No comments</h3>\n        )}\n\n        {hideStatus\n          && (\n            <PostComments\n              comments={comments}\n              updateComments={updateComments}\n            />\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            updateComments={updateComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUsers = async() => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ selectedUserId, selectUser }) => {\n  const [users, setUsers] = useState([]);\n\n  const loadUsers = async() => {\n    const loadedUser = await getUsers();\n\n    setUsers(loadedUser.slice(0, 9));\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUserId}\n        onChange={selectUser}\n      >\n        <option value=\"0\">All users</option>\n        {users.map(user => (\n          <option\n            key={user.id}\n            value={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = useCallback((event) => {\n    setSelectedUserId(+event.target.value);\n  }, []);\n\n  const selectPost = (postId) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          selectUser={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectPost={selectPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails\n                selectedPostId={selectedPostId}\n              />\n            )\n            : (\n              <h3>Open a post</h3>\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}